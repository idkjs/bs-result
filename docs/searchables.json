[{"href": "./index.html", "title": "Home", "contents": "A Result type implementation for ReasonML", "rendered": "A Result type implementation for ReasonML", "breadcrumb": "Home"},
{"href": "./index.html#bs-result", "title": "bs-result", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Build Status\nCoverage Status", "rendered": "<a href=\"https://www.travis-ci.org/scull7/bs-result\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><img src='https://www.travis-ci.org/scull7/bs-result.svg?branch=master' alt='Build Status' /></a>\n<a href=\"https://coveralls.io/github/scull7/bs-result?branch=master\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><img src='https://coveralls.io/repos/github/scull7/bs-result/badge.svg?branch=master' alt='Coverage Status' /></a>", "breadcrumb": "Home"},
{"href": "./api/Result.html#value-Promise.unsafeFlatMapResolve", "title": "Promise.unsafeFlatMapResolve", "contents": "unsafeFlatMapResolve Belt Result t exn  Js Promise t Belt Result t exn Js Promise t  ", "rendered": "<h4 class='item'>let unsafeFlatMapResolve: (\n  'a => Belt.Result.t('b, exn),\n  Js.Promise.t(Belt.Result.t('a, exn))\n) => Js.Promise.t('b)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-Promise.unsafeMapResolve", "title": "Promise.unsafeMapResolve", "contents": "unsafeMapResolve  Js Promise t Belt Result t exn Js Promise t  ", "rendered": "<h4 class='item'>let unsafeMapResolve: (\n  'a => 'b,\n  Js.Promise.t(Belt.Result.t('a, exn))\n) => Js.Promise.t('b)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-Promise.unsafeResolve", "title": "Promise.unsafeResolve", "contents": "unsafeResolve Js Promise t Belt Result t exn Js Promise t ", "rendered": "<h4 class='item'>let unsafeResolve: Js.Promise.t(\n  Belt.Result.t('a, exn)\n) => Js.Promise.t('a)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-Promise.flatMap", "title": "Promise.flatMap", "contents": "flatMap Belt Result t  Js Promise t Belt Result t Js Promise t Belt Result t  ", "rendered": "<h4 class='item'>let flatMap: (\n  'a => Belt.Result.t('b, 'c),\n  Js.Promise.t(Belt.Result.t('a, 'c))\n) => Js.Promise.t(Belt.Result.t('b, 'c))</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-Promise.andThen", "title": "Promise.andThen", "contents": "andThen Js Promise t Belt Result t  Js Promise t Belt Result t Js Promise t Belt Result t  ", "rendered": "<h4 class='item'>let andThen: (\n  'a => Js.Promise.t(Belt.Result.t('b, 'c)),\n  Js.Promise.t(Belt.Result.t('a, 'c))\n) => Js.Promise.t(Belt.Result.t('b, 'c))</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-Promise.bimap", "title": "Promise.bimap", "contents": "bimap   Js Promise t Belt Result t Js Promise t Belt Result t   ", "rendered": "<h4 class='item'>let bimap: (\n  'a => 'c,\n  'b => 'd,\n  Js.Promise.t(Belt.Result.t('a, 'b))\n) => Js.Promise.t(Belt.Result.t('c, 'd))</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-Promise.fold", "title": "Promise.fold", "contents": "fold Js Promise t  Js Promise t  Js Promise t Belt Result t Js Promise t   ", "rendered": "<h4 class='item'>let fold: (\n  'a => Js.Promise.t('c),\n  'b => Js.Promise.t('c),\n  Js.Promise.t(Belt.Result.t('a, 'b))\n) => Js.Promise.t('c)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-Promise.map", "title": "Promise.map", "contents": "map  Js Promise t Belt Result t Js Promise t Belt Result t  ", "rendered": "<h4 class='item'>let map: (\n  'a => 'b,\n  Js.Promise.t(Belt.Result.t('a, 'c))\n) => Js.Promise.t(Belt.Result.t('b, 'c))</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-Promise.ap", "title": "Promise.ap", "contents": "ap Js Promise t Belt Result t Js Promise t Belt Result t  Js Promise t Belt Result t  ", "rendered": "<h4 class='item'>let ap: (\n  Js.Promise.t(Belt.Result.t('a, 'b)),\n  Js.Promise.t(\n    Belt.Result.t('a => 'c, 'b)\n  )\n) => Js.Promise.t(Belt.Result.t('c, 'b))</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-Promise.isError", "title": "Promise.isError", "contents": "isError Js Promise t Belt Result t Js Promise t bool ", "rendered": "<h4 class='item'>let isError: Js.Promise.t(\n  Belt.Result.t('a, 'b)\n) => Js.Promise.t(bool)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-Promise.isOk", "title": "Promise.isOk", "contents": "isOk Js Promise t Belt Result t Js Promise t bool ", "rendered": "<h4 class='item'>let isOk: Js.Promise.t(\n  Belt.Result.t('a, 'b)\n) => Js.Promise.t(bool)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-Promise.error", "title": "Promise.error", "contents": "error Js Promise t Belt Result t ", "rendered": "<h4 class='item'>let error: 'a => Js.Promise.t(Belt.Result.t('b, 'a))</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-Promise.return", "title": "Promise.return", "contents": "return Js Promise t Belt Result t ", "rendered": "<h4 class='item'>let return: 'a => Js.Promise.t(Belt.Result.t('a, 'b))</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#module-Promise", "title": "Promise", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Result"},
{"href": "./api/Result.html#module-Promise", "title": "Promise", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-swap", "title": "swap", "contents": "swap Belt Result t Belt Result t ", "rendered": "<h4 class='item'>let swap: Belt.Result.t('a, 'b) => Belt.Result.t('b, 'a)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-unsafeGet", "title": "unsafeGet", "contents": "unsafeGet Belt Result t exn ", "rendered": "<h4 class='item'>let unsafeGet: Belt.Result.t('a, exn) => 'a</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-getOrElseThunk", "title": "getOrElseThunk", "contents": "getOrElseThunk  Belt Result t  ", "rendered": "<h4 class='item'>let getOrElseThunk: ('b => 'a, Belt.Result.t('a, 'b)) => 'a</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-getOrElse", "title": "getOrElse", "contents": "getOrElse Belt Result t  ", "rendered": "<h4 class='item'>let getOrElse: ('a, Belt.Result.t('a, 'b)) => 'a</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-fold", "title": "fold", "contents": "fold   Belt Result t   ", "rendered": "<h4 class='item'>let fold: ('a => 'c, 'b => 'c, Belt.Result.t('a, 'b)) => 'c</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-forEach", "title": "forEach", "contents": "forEach unit  Belt Result t unit  ", "rendered": "<h4 class='item'>let forEach: ('a => unit, Belt.Result.t('a, 'b)) => unit</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-forAll", "title": "forAll", "contents": "forAll bool  Belt Result t bool  ", "rendered": "<h4 class='item'>let forAll: ('a => bool, Belt.Result.t('a, 'b)) => bool</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-isError", "title": "isError", "contents": "isError Belt Result t bool ", "rendered": "<h4 class='item'>let isError: Belt.Result.t('a, 'b) => bool</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-isOk", "title": "isOk", "contents": "isOk Belt Result t bool ", "rendered": "<h4 class='item'>let isOk: Belt.Result.t('a, 'b) => bool</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-fromOption", "title": "fromOption", "contents": "Given a Belt.Option.t(&#39;a) and a function unit =&gt; &#39;b return an Ok(&#39;a)\nif the given Belt.Option.t(&#39;a) is a Belt.Option.Some(&#39;a), or\nan Error(&#39;b) if the input is a Belt.Option.None.", "rendered": "Given a <code>Belt.Option.t(&#39;a)</code> and a function <code>unit =&gt; &#39;b</code> return an <code>Ok(&#39;a)</code>\nif the given <code>Belt.Option.t(&#39;a</code>) is a <code>Belt.Option.Some(&#39;a)</code>, or\nan <code>Error(&#39;b)</code> if the input is a <code>Belt.Option.None</code>.", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-fromOption", "title": "fromOption", "contents": "fromOption unit  option Belt Result t  ", "rendered": "<h4 class='item'>let fromOption: (unit => 'b, option('a)) => Belt.Result.t(\n  'a,\n  'b\n)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-toOption", "title": "toOption", "contents": "Returns a Belt.Option.Some(&#39;a) if the source is an Ok(&#39;a), or\na Belt.Option.None if the source is an Error(&#39;b).", "rendered": "Returns a <code>Belt.Option.Some(&#39;a)</code> if the source is an <code>Ok(&#39;a)</code>, or\na <code>Belt.Option.None</code> if the source is an <code>Error(&#39;b)</code>.", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-toOption", "title": "toOption", "contents": "toOption Belt Result t option ", "rendered": "<h4 class='item'>let toOption: Belt.Result.t('a, 'b) => option('a)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "code block", "contents": "let f = x => x + 1;\nlet g = x => x + 2;\nlet h = x => x + 3;\nlet i = x => x + 4;\nlet a = 42;\nlet b = 24;\nlet ok1 = Result.bimap(a => f(g(a)), b => h(i(b)), Result.return(a));\nlet ok2 = Result.bimap(g, i, Result.bimap(f, h, Result.return(a)));\nlet err1 = Result.bimap(a => f(g(a)), b => h(i(b)), Result.error(b));\nlet err2 = Result.bimap(g, i, Result.bimap(f, h, Result.error(b)));\nJs.log3(\"Both should be true\", ok1 == ok2, err1 == err2);", "rendered": "<pre><code>let f = x => x + 1;\nlet g = x => x + 2;\nlet h = x => x + 3;\nlet i = x => x + 4;\nlet a = 42;\nlet b = 24;\nlet ok1 = Result.bimap(a => f(g(a)), b => h(i(b)), Result.return(a));\nlet ok2 = Result.bimap(g, i, Result.bimap(f, h, Result.return(a)));\nlet err1 = Result.bimap(a => f(g(a)), b => h(i(b)), Result.error(b));\nlet err2 = Result.bimap(g, i, Result.bimap(f, h, Result.error(b)));\nJs.log3(\"Both should be true\", ok1 == ok2, err1 == err2);</code></pre>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "code block", "contents": "let a = Result.return(42);\nlet b = Result.error(\"boom!\");\nlet a1 = Result.bimap(a => a, b => b, a);\nlet b1 = Result.bimap(a => a, b => b, b);\nJs.log3(\"Both should be true\", a == a1, b == b1);", "rendered": "<pre><code>let a = Result.return(42);\nlet b = Result.error(\"boom!\");\nlet a1 = Result.bimap(a => a, b => b, a);\nlet b1 = Result.bimap(a => a, b => b, b);\nJs.log3(\"Both should be true\", a == a1, b == b1);</code></pre>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-bimap", "title": "bimap", "contents": "bimap provides a Bifunctor compatible interface for Belt.Result.t.\nThere are 2 laws which a Bifunctor must meet.", "rendered": "<code>bimap</code> provides a Bifunctor compatible interface for <code>Belt.Result.t</code>.\nThere are 2 laws which a Bifunctor must meet.", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-bimap", "title": "bimap", "contents": "bimap   Belt Result t Belt Result t   ", "rendered": "<h4 class='item'>let bimap: (\n  'a => 'c,\n  'b => 'd,\n  Belt.Result.t('a, 'b)\n) => Belt.Result.t('c, 'd)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "code block", "contents": "let u = x => x + 1;\nlet y = 1;\nlet a = Result.ap(Result.return(y), Result.return(u));\nlet b = Result.ap(Result.return(u), Result.return(f => f(y)));\nJs.log2(\"Should be true\", a == b);", "rendered": "<pre><code>let u = x => x + 1;\nlet y = 1;\nlet a = Result.ap(Result.return(y), Result.return(u));\nlet b = Result.ap(Result.return(u), Result.return(f => f(y)));\nJs.log2(\"Should be true\", a == b);</code></pre>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "code block", "contents": "let f = x => x + 1;\nlet x = 2;\nlet a = Result.ap(Result.return(x), Result.return(f));\nlet b = Result.return(f(x));\nJs.log2(\"Should be true\", a == b);", "rendered": "<pre><code>let f = x => x + 1;\nlet x = 2;\nlet a = Result.ap(Result.return(x), Result.return(f));\nlet b = Result.return(f(x));\nJs.log2(\"Should be true\", a == b);</code></pre>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "code block", "contents": "let f = Result.return(x => x);\nlet a = Result.return(2);\nlet b = Result.ap(a, f);\nJs.log2(\"Should be true\", a == b);", "rendered": "<pre><code>let f = Result.return(x => x);\nlet a = Result.return(2);\nlet b = Result.ap(a, f);\nJs.log2(\"Should be true\", a == b);</code></pre>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-ap", "title": "ap", "contents": "Applicative apply operation. This implements the Applicative specification", "rendered": "Applicative apply operation. This implements the Applicative specification", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-ap", "title": "ap", "contents": "ap Belt Result t Belt Result t  Belt Result t  ", "rendered": "<h4 class='item'>let ap: (\n  Belt.Result.t('a, 'b),\n  Belt.Result.t('a => 'c, 'b)\n) => Belt.Result.t('c, 'b)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "code block", "contents": "let e = Result.error(\"bad things\");", "rendered": "<pre><code>let e = Result.error(\"bad things\");</code></pre>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-error", "title": "error", "contents": "This operation is the constructor to lift a value into the Result\ncontext as an Error.", "rendered": "This operation is the constructor to lift a value into the <code>Result</code>\ncontext as an <code>Error</code>.", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-error", "title": "error", "contents": "error Belt Result t ", "rendered": "<h4 class='item'>let error: 'b => Belt.Result.t('a, 'b)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "code block", "contents": "let r = Result.return(42);", "rendered": "<pre><code>let r = Result.return(42);</code></pre>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-return", "title": "return", "contents": "This operation is the pure Applicative operation for lifting a value\ninto the Result context.", "rendered": "This operation is the <code>pure</code> Applicative operation for lifting a value\ninto the <code>Result</code> context.", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-return", "title": "return", "contents": "return Belt Result t ", "rendered": "<h4 class='item'>let return: 'a => Belt.Result.t('a, 'b)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-flatMap3", "title": "flatMap3", "contents": "flatMap3 provides the Monad compatible flatMap over 3 results and passes\nthe contents of those results to a function with an arity of 3.", "rendered": "<code>flatMap3</code> provides the Monad compatible flatMap over 3 results and passes\nthe contents of those results to a function with an arity of 3.", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-flatMap3", "title": "flatMap3", "contents": "flatMap3 Belt Result t    Belt Result t Belt Result t Belt Result t Belt Result t    ", "rendered": "<h4 class='item'>let flatMap3: (\n  ('a, 'b, 'c) => Belt.Result.t('d, 'e),\n  Belt.Result.t('a, 'e),\n  Belt.Result.t('b, 'e),\n  Belt.Result.t('c, 'e)\n) => Belt.Result.t('d, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-flatMap2", "title": "flatMap2", "contents": "flatMap2 provides the Monad compatible flatMap over 2 results and passes\nthe contents of those results to a function with an arity of 2.", "rendered": "<code>flatMap2</code> provides the Monad compatible flatMap over 2 results and passes\nthe contents of those results to a function with an arity of 2.", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-flatMap2", "title": "flatMap2", "contents": "flatMap2 Belt Result t   Belt Result t Belt Result t Belt Result t   ", "rendered": "<h4 class='item'>let flatMap2: (\n  ('a, 'b) => Belt.Result.t('c, 'd),\n  Belt.Result.t('a, 'd),\n  Belt.Result.t('b, 'd)\n) => Belt.Result.t('c, 'd)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "code block", "contents": "let a = Result.return(42);\nlet x = Result.flatMap(Result.return, a);\nJs.log2(\"Should be true\", a == x);", "rendered": "<pre><code>let a = Result.return(42);\nlet x = Result.flatMap(Result.return, a);\nJs.log2(\"Should be true\", a == x);</code></pre>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "code block", "contents": "let f = x => Result.return(x + 1);\nlet a = 42;\nlet x = Result.flatMap(f, Result.return(a));\nJs.log2(\"Should be true\", x == f(a));", "rendered": "<pre><code>let f = x => Result.return(x + 1);\nlet a = 42;\nlet x = Result.flatMap(f, Result.return(a));\nJs.log2(\"Should be true\", x == f(a));</code></pre>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-flatMap", "title": "flatMap", "contents": "flatMap (chain) provides a Monad compatible interface for Belt.Result.t.\nThere are 2 laws which a Monad must meet.", "rendered": "<code>flatMap</code> (chain) provides a Monad compatible interface for <code>Belt.Result.t</code>.\nThere are 2 laws which a Monad must meet.", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-flatMap", "title": "flatMap", "contents": "flatMap Belt Result t  Belt Result t Belt Result t  ", "rendered": "<h4 class='item'>let flatMap: (\n  'a => Belt.Result.t('b, 'c),\n  Belt.Result.t('a, 'c)\n) => Belt.Result.t('b, 'c)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map3", "title": "map3", "contents": "map3 provides the Functor compatible map over 3 results and passes the\ncontents of those results to a function with an arity of 3.", "rendered": "<code>map3</code> provides the Functor compatible map over 3 results and passes the\ncontents of those results to a function with an arity of 3.", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map3", "title": "map3", "contents": "map3    Belt Result t Belt Result t Belt Result t Belt Result t    ", "rendered": "<h4 class='item'>let map3: (\n  ('a, 'b, 'c) => 'd,\n  Belt.Result.t('a, 'e),\n  Belt.Result.t('b, 'e),\n  Belt.Result.t('c, 'e)\n) => Belt.Result.t('d, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map2", "title": "map2", "contents": "map2 provides the Functor compatible map over 2 results and passes the\ncontents of those results to a function with an arity of 2.", "rendered": "<code>map2</code> provides the Functor compatible map over 2 results and passes the\ncontents of those results to a function with an arity of 2.", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map2", "title": "map2", "contents": "map2   Belt Result t Belt Result t Belt Result t   ", "rendered": "<h4 class='item'>let map2: (\n  ('a, 'b) => 'c,\n  Belt.Result.t('a, 'd),\n  Belt.Result.t('b, 'd)\n) => Belt.Result.t('c, 'd)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "code block", "contents": "let f = x => x + 1;\nlet g = x => x + 2;\nlet a = Result.map(x => f(g(x)), Result.return(0));\nlet b = Result.map(f, Result.map(g, Result.return(0)));\nJs.log2(\"Should be true\", a == b);", "rendered": "<pre><code>let f = x => x + 1;\nlet g = x => x + 2;\nlet a = Result.map(x => f(g(x)), Result.return(0));\nlet b = Result.map(f, Result.map(g, Result.return(0)));\nJs.log2(\"Should be true\", a == b);</code></pre>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "code block", "contents": "Js.log2(\"Should be 42\", Result.map(x => x, Result.return(42)));", "rendered": "<pre><code>Js.log2(\"Should be 42\", Result.map(x => x, Result.return(42)));</code></pre>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map", "title": "map", "contents": "map provides a Functor compatible interface for Belt.Result.t.\nThere are 2 laws which a Functor must meet.", "rendered": "<code>map</code> provides a Functor compatible interface for <code>Belt.Result.t</code>.\nThere are 2 laws which a Functor must meet.", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map", "title": "map", "contents": "map  Belt Result t Belt Result t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, Belt.Result.t('a, 'c)) => Belt.Result.t(\n  'b,\n  'c\n)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "Result", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Result"},
{"href": "./api/Result.html#Other", "title": "Other", "contents": "", "rendered": "", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "Result", "contents": "This is also known as the Comonad specification, where the method names\nare extend and extract for unsafeGet and getOrElseThunk\nrespectively.", "rendered": "This is also known as the Comonad specification, where the method names\nare <code>extend</code> and <code>extract</code> for <code>unsafeGet</code> and <code>getOrElseThunk</code>\nrespectively.", "breadcrumb": "Result"},
{"href": "./api/Result.html#Extraction", "title": "Extraction", "contents": "", "rendered": "", "breadcrumb": "Result"},
{"href": "./api/Result.html#Logical-Operations", "title": "Logical Operations", "contents": "", "rendered": "", "breadcrumb": "Result"},
{"href": "./api/Result.html#Belt.Option.t---39-a-", "title": "Belt.Option.t(&#39;a)", "contents": "", "rendered": "", "breadcrumb": "Result"},
{"href": "./api/Result.html#Bifunctor", "title": "Bifunctor", "contents": "", "rendered": "", "breadcrumb": "Result"},
{"href": "./api/Result.html#Applicative", "title": "Applicative", "contents": "", "rendered": "", "breadcrumb": "Result"},
{"href": "./api/Result.html#Monad", "title": "Monad", "contents": "", "rendered": "", "breadcrumb": "Result"},
{"href": "./api/Result.html#Functor", "title": "Functor", "contents": "", "rendered": "", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "code block", "contents": "let r =\n  Result.return(10)\n  |> Result.map(x => x + 10)\n  |> Result.flatMap(x => Result.return(x + 2))\n  |> Result.getOrElse(-1);\nJs.log2(\"Result: \", r);", "rendered": "<pre><code>let r =\n  Result.return(10)\n  |> Result.map(x => x + 10)\n  |> Result.flatMap(x => Result.return(x + 2))\n  |> Result.getOrElse(-1);\nJs.log2(\"Result: \", r);</code></pre>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "Result", "contents": "Here a basic example:", "rendered": "Here a basic example:", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "Result", "contents": "Monadic interface functions for the Belt.Result.t object.", "rendered": "Monadic interface functions for the <code>Belt.Result.t</code> object.", "breadcrumb": "Result"},
{"href": "./api/Result.html#Result", "title": "Result", "contents": "", "rendered": "", "breadcrumb": "Result"}]